Imports System.Data.SQLite
Imports System.IO
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows.Forms

''' <summary>
''' Classe respons√°vel pela sincroniza√ß√£o de dados usando dados fixos para teste
''' Compat√≠vel com .NET Framework 4.7
''' Implementa o plano de execu√ß√£o para nova instala√ß√£o
''' </summary>
Public Class SincronizadorDados
    Private ReadOnly dbManager As DatabaseManager
    Private Const LOCAL_VERSION_FILE As String = "version.local"
    Private Const INSTALLATION_FLAG_FILE As String = "installation.flag"
    Private Const DATABASE_INIT_FILE As String = "database.init"
    
    Public Sub New(Optional dbPath As String = Nothing)
        dbManager = New DatabaseManager(dbPath)
    End Sub
    
    ''' <summary>
    ''' Detecta se √© uma nova instala√ß√£o baseado em m√∫ltiplos indicadores
    ''' </summary>
    ''' <returns>True se for nova instala√ß√£o, False se for atualiza√ß√£o</returns>
    Public Function IsNovaInstalacao() As Boolean
        Console.WriteLine("üîç Verificando se √© uma nova instala√ß√£o...")
        
        Dim indicadores As New List(Of String)
        
        ' 1. Verificar se o arquivo de vers√£o local existe
        Dim versionFile = Path.Combine(Application.StartupPath, LOCAL_VERSION_FILE)
        If Not File.Exists(versionFile) Then
            indicadores.Add("Arquivo version.local n√£o encontrado")
        End If
        
        ' 2. Verificar se o arquivo de flag de instala√ß√£o existe
        If Not File.Exists(INSTALLATION_FLAG_FILE) Then
            indicadores.Add("Arquivo installation.flag n√£o encontrado")
        End If
        
        ' 3. Verificar se o banco de dados existe e tem dados
        Dim bancoExiste = dbManager.VerificarExistenciaBanco()
        If Not bancoExiste Then
            indicadores.Add("Banco de dados n√£o encontrado")
        Else
            ' Verificar se o banco tem dados
            Dim resultado = dbManager.ExecutarQuery("SELECT COUNT(*) as total FROM incidents")
            If resultado.Success AndAlso resultado.Registros.Count > 0 Then
                Dim totalIncidentes = Convert.ToInt32(resultado.Registros(0)("total"))
                If totalIncidentes = 0 Then
                    indicadores.Add("Banco de dados vazio (sem incidentes)")
                End If
            Else
                indicadores.Add("N√£o foi poss√≠vel verificar dados do banco")
            End If
        End If
        
        ' 4. Verificar se a tabela historical_data tem dados
        If bancoExiste Then
            Dim resultadoHistorical = dbManager.ExecutarQuery("SELECT COUNT(*) as total FROM historical_data")
            If resultadoHistorical.Success AndAlso resultadoHistorical.Registros.Count > 0 Then
                Dim totalHistorical = Convert.ToInt32(resultadoHistorical.Registros(0)("total"))
                If totalHistorical = 0 Then
                    indicadores.Add("Tabela historical_data vazia")
                End If
            Else
                indicadores.Add("Tabela historical_data n√£o encontrada ou inacess√≠vel")
            End If
        End If
        
        ' 5. Verificar se o arquivo de inicializa√ß√£o do banco existe
        If Not File.Exists(DATABASE_INIT_FILE) Then
            indicadores.Add("Arquivo database.init n√£o encontrado")
        End If
        
        ' Decis√£o baseada nos indicadores
        Dim resultadoNovaInstalacao = indicadores.Count >= 3 ' Se pelo menos 3 indicadores apontam para nova instala√ß√£o
        
        Console.WriteLine($"üìä Indicadores de nova instala√ß√£o encontrados: {indicadores.Count}")
        For Each indicador In indicadores
            Console.WriteLine($"   ‚ö†Ô∏è {indicador}")
        Next
        
        If resultadoNovaInstalacao Then
            Console.WriteLine("‚úÖ Detectada NOVA INSTALA√á√ÉO")
        Else
            Console.WriteLine("‚úÖ Detectada ATUALIZA√á√ÉO/EXECU√á√ÉO NORMAL")
        End If
        
        Return resultadoNovaInstalacao
    End Function
    
    ''' <summary>
    ''' Executa sincroniza√ß√£o inteligente que decide automaticamente entre carga inicial ou incremental
    ''' </summary>
    Public Sub ExecutarSincronizacaoInteligente()
        Console.WriteLine("üöÄ Iniciando sincroniza√ß√£o inteligente...")
        
        Try
            If IsNovaInstalacao() Then
                Console.WriteLine("üÜï Executando carga inicial para nova instala√ß√£o...")
                RealizarCargaInicial()
                MarcarComoInstalado()
            Else
                Console.WriteLine("üîÑ Executando carga incremental para instala√ß√£o existente...")
                RealizarCargaIncremental()
            End If
            
            Console.WriteLine("‚úÖ Sincroniza√ß√£o inteligente conclu√≠da!")
            
        Catch ex As Exception
            Console.WriteLine($"‚ùå Erro na sincroniza√ß√£o inteligente: {ex.Message}")
            Throw
        End Try
    End Sub
    
    ''' <summary>
    ''' Marca o sistema como instalado criando os arquivos de controle necess√°rios
    ''' </summary>
    Private Sub MarcarComoInstalado()
        Try
            Console.WriteLine("üè∑Ô∏è Marcando sistema como instalado...")
            
            ' 1. Criar arquivo de flag de instala√ß√£o
            File.WriteAllText(INSTALLATION_FLAG_FILE, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
            Console.WriteLine($"   ‚úÖ Criado: {INSTALLATION_FLAG_FILE}")
            
            ' 2. Criar arquivo de inicializa√ß√£o do banco
            File.WriteAllText(DATABASE_INIT_FILE, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))
            Console.WriteLine($"   ‚úÖ Criado: {DATABASE_INIT_FILE}")
            
            ' 3. Criar version.local com vers√£o apropriada
            Dim versionFile = Path.Combine(Application.StartupPath, LOCAL_VERSION_FILE)
            If Not File.Exists(versionFile) Then
                ' Tentar obter vers√£o da aplica√ß√£o atual, sen√£o usar padr√£o
                Dim versaoAtual = ObterVersaoAplicacao()
                File.WriteAllText(versionFile, versaoAtual)
                Console.WriteLine($"   ‚úÖ Criado: {versionFile} com vers√£o {versaoAtual}")
            Else
                Console.WriteLine($"   ‚ÑπÔ∏è Arquivo {versionFile} j√° existe")
            End If
            
            Console.WriteLine("‚úÖ Sistema marcado como instalado com sucesso!")
            
        Catch ex As Exception
            Console.WriteLine($"‚ö†Ô∏è Erro ao marcar como instalado: {ex.Message}")
        End Try
    End Sub
    
    ''' <summary>
    ''' Obt√©m a vers√£o da aplica√ß√£o atual
    ''' </summary>
    Private Function ObterVersaoAplicacao() As String
        Try
            ' Tentar obter da vers√£o do assembly
            Dim version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version
            If version IsNot Nothing Then
                Return $"{version.Major}.{version.Minor}.{version.Build}"
            End If
        Catch ex As Exception
            Console.WriteLine($"   ‚ö†Ô∏è Erro ao obter vers√£o do assembly: {ex.Message}")
        End Try
        
        ' Vers√£o padr√£o se n√£o conseguir obter
        Return "1.0.0"
    End Function
    
    ''' <summary>
    ''' Executa carga inicial completa dos dados (√∫ltimos 3 anos simulados)
    ''' Usado na primeira instala√ß√£o
    ''' </summary>
    Public Sub RealizarCargaInicial()
        Console.WriteLine("üîÑ Iniciando carga inicial de dados (√∫ltimos 3 anos)...")
        
        Try
            ' Conectar ao banco
            Dim conexaoResult = dbManager.Conectar()
            If Not conexaoResult.Success Then
                Console.WriteLine($"‚ùå Erro ao conectar: {conexaoResult.Mensagem}")
                Return
            End If
            
            Console.WriteLine($"‚úÖ Conectado ao banco: {conexaoResult.TotalTabelas} tabelas encontradas")
            
            ' Limpar dados existentes para carga completa
            Console.WriteLine("üßπ Limpando dados existentes para carga inicial...")
            LimparDadosExistentes()
            
            ' Inserir dados hist√≥ricos (√∫ltimos 3 anos)
            Console.WriteLine("üìù Inserindo dados hist√≥ricos (√∫ltimos 3 anos)...")
            InserirDadosHistoricosCompletos()
            
            ' Atualizar dados hist√≥ricos agregados
            Console.WriteLine("üìä Atualizando dados hist√≥ricos agregados...")
            AtualizarDadosHistoricos()
            
            Console.WriteLine("‚úÖ Carga inicial conclu√≠da!")
            
        Catch ex As Exception
            Console.WriteLine($"‚ùå Erro na carga inicial: {ex.Message}")
            Throw
        Finally
            ' Desconectar do banco
            dbManager.Desconectar()
        End Try
    End Sub
    
    ''' <summary>
    ''' Executa carga incremental de dados (apenas dados novos)
    ''' Usado nas execu√ß√µes subsequentes
    ''' </summary>
    Public Sub RealizarCargaIncremental()
        Console.WriteLine("üîÑ Iniciando carga incremental de dados...")
        
        Try
            ' Conectar ao banco
            Dim conexaoResult = dbManager.Conectar()
            If Not conexaoResult.Success Then
                Console.WriteLine($"‚ùå Erro ao conectar: {conexaoResult.Mensagem}")
                Return
            End If
            
            Console.WriteLine($"‚úÖ Conectado ao banco: {conexaoResult.TotalTabelas} tabelas encontradas")
            
            ' Obter data do √∫ltimo registro
            Dim ultimaData = ObterDataUltimoRegistro()
            Console.WriteLine($"üìÖ √öltima data sincronizada: {ultimaData:dd/MM/yyyy}")
            
            ' Inserir apenas dados novos (√∫ltimos 7 dias simulados)
            Console.WriteLine("üìù Inserindo dados incrementais (√∫ltimos 7 dias)...")
            InserirDadosIncrementais(ultimaData)
            
            ' Atualizar dados hist√≥ricos agregados
            Console.WriteLine("üìä Atualizando dados hist√≥ricos agregados...")
            AtualizarDadosHistoricos()
            
            Console.WriteLine("‚úÖ Carga incremental conclu√≠da!")
            
        Catch ex As Exception
            Console.WriteLine($"‚ùå Erro na carga incremental: {ex.Message}")
            Throw
        Finally
            ' Desconectar do banco
            dbManager.Desconectar()
        End Try
    End Sub
    
    ''' <summary>
    ''' Executa sincroniza√ß√£o de teste com dados fixos (m√©todo original mantido para compatibilidade)
    ''' </summary>
    Public Sub ExecutarSincronizacaoTeste()
        Console.WriteLine("üîÑ Iniciando sincroniza√ß√£o de teste...")
        
        Try
            ' Conectar ao banco
            Dim conexaoResult = dbManager.Conectar()
            If Not conexaoResult.Success Then
                Console.WriteLine($"‚ùå Erro ao conectar: {conexaoResult.Mensagem}")
                Return
            End If
            
            Console.WriteLine($"‚úÖ Conectado ao banco: {conexaoResult.TotalTabelas} tabelas encontradas")
            
            ' Limpar dados existentes (opcional)
            Console.WriteLine("üßπ Limpando dados existentes...")
            LimparDadosExistentes()
            
            ' Inserir dados de teste
            Console.WriteLine("üìù Inserindo dados de teste...")
            InserirDadosTeste()
            
            ' Atualizar dados hist√≥ricos
            Console.WriteLine("üìä Atualizando dados hist√≥ricos...")
            AtualizarDadosHistoricos()
            
            Console.WriteLine("‚úÖ Sincroniza√ß√£o de teste conclu√≠da!")
            
        Catch ex As Exception
            Console.WriteLine($"‚ùå Erro na sincroniza√ß√£o: {ex.Message}")
            Throw
        Finally
            ' Desconectar do banco
            dbManager.Desconectar()
        End Try
    End Sub
    
    ''' <summary>
    ''' Insere dados hist√≥ricos completos simulando 3 anos de dados
    ''' </summary>
    Private Sub InserirDadosHistoricosCompletos()
        Dim registrosInseridos As Integer = 0
        Dim registrosComErro As Integer = 0
        
        ' Gerar dados para os √∫ltimos 3 anos (aproximadamente 1000 incidentes)
        Dim dataInicio = DateTime.Now.AddYears(-3)
        Dim dataFim = DateTime.Now
        
        ' Grupos de suporte
        Dim grupos As String() = {"Suporte T√©cnico", "Desenvolvimento", "Infraestrutura", "Seguran√ßa", "DBA"}
        Dim categorias As String() = {"Acesso", "Hardware", "Software", "Rede", "Email", "Backup", "Seguran√ßa", "Performance"}
        Dim prioridades As String() = {"Baixa", "M√©dia", "Alta", "Cr√≠tica"}
        Dim departamentos As String() = {"TI", "Administrativo", "Financeiro", "Vendas", "Marketing", "RH", "Opera√ß√µes"}
        
        Dim random As New Random(42) ' Seed fixo para reprodutibilidade
        
        ' Gerar aproximadamente 1000 incidentes distribu√≠dos nos 3 anos
        For i As Integer = 1 To 1000
            Try
                ' Data aleat√≥ria nos √∫ltimos 3 anos
                Dim diasAleatorios = random.Next(0, (dataFim - dataInicio).Days)
                Dim dataCriacao = dataInicio.AddDays(diasAleatorios)
                
                ' 80% dos incidentes t√™m data de encerramento
                Dim dataEncerramento As DateTime? = Nothing
                If random.Next(100) < 80 Then
                    Dim tempoResolucao = random.Next(1, 30) ' 1 a 30 dias
                    dataEncerramento = dataCriacao.AddDays(tempoResolucao)
                End If
                
                Dim incidente As New IncidenteTeste With {
                    .Id = $"INC{dataCriacao:yyyyMMdd}{i:D3}",
                    .Assunto = GerarAssuntoAleatorio(random, categorias(random.Next(categorias.Length))),
                    .Departamento = departamentos(random.Next(departamentos.Length)),
                    .GrupoDirecionado = grupos(random.Next(grupos.Length)),
                    .Categoria = categorias(random.Next(categorias.Length)),
                    .Prioridade = prioridades(random.Next(prioridades.Length)),
                    .DataCriacao = dataCriacao,
                    .DataEncerramento = dataEncerramento
                }

                ' Usar o m√©todo do DatabaseManager que recebe os campos individuais
                Dim resultado = dbManager.InserirIncidente(
                    incidente.Id,
                    incidente.Assunto,
                    incidente.Departamento,
                    incidente.GrupoDirecionado,
                    incidente.Categoria,
                    incidente.Prioridade,
                    incidente.DataCriacao,
                    incidente.DataEncerramento)
                If resultado.Success Then
                    registrosInseridos += 1

                    ' Mostrar progresso a cada 100 registros
                    If registrosInseridos Mod 100 = 0 Then
                        Console.WriteLine($"   üìä Progresso: {registrosInseridos} registros inseridos...")
                    End If
                Else
                    registrosComErro += 1
                    Console.WriteLine($"   ‚ö†Ô∏è Erro ao inserir incidente {incidente.Id}: {resultado.Mensagem}")
                End If
            Catch ex As Exception
                registrosComErro += 1
                Console.WriteLine($"   ‚ö†Ô∏è Exce√ß√£o ao inserir incidente {i}: {ex.Message}")
            End Try
        Next

        Console.WriteLine($"   ‚úÖ Inseridos {registrosInseridos} incidentes hist√≥ricos")
        If registrosComErro > 0 Then
            Console.WriteLine($"   ‚ö†Ô∏è {registrosComErro} incidentes com erro")
        End If
    End Sub

    ''' <summary>
    ''' Insere dados incrementais (apenas dados novos desde a √∫ltima sincroniza√ß√£o)
    ''' </summary>
    Private Sub InserirDadosIncrementais(ultimaData As DateTime)
        Dim registrosInseridos As Integer = 0
        Dim registrosComErro As Integer = 0

        ' Verificar se a √∫ltima data √© futura ou muito antiga
        Dim dataFim = DateTime.Now
        Dim dataInicio As DateTime

        If ultimaData > dataFim Then
            ' Se a √∫ltima data √© futura, usar os √∫ltimos 7 dias
            Console.WriteLine($"   ‚ö†Ô∏è √öltima data ({ultimaData:dd/MM/yyyy}) √© futura. Usando √∫ltimos 7 dias.")
            dataInicio = dataFim.AddDays(-7)
        Else
            ' Usar a data ap√≥s a √∫ltima sincroniza√ß√£o
            dataInicio = ultimaData.AddDays(1)
        End If

        ' Verificar se h√° per√≠odo v√°lido para gerar dados
        Dim diasDisponiveis = (dataFim - dataInicio).Days
        If diasDisponiveis <= 0 Then
            Console.WriteLine($"   ‚ÑπÔ∏è Nenhum per√≠odo v√°lido para dados incrementais (dias: {diasDisponiveis})")
            Return
        End If

        ' Limitar o per√≠odo m√°ximo para evitar overflow
        Dim periodoMaximo = Math.Min(diasDisponiveis, 30) ' M√°ximo 30 dias
        If diasDisponiveis > 30 Then
            Console.WriteLine($"   ‚ö†Ô∏è Per√≠odo muito longo ({diasDisponiveis} dias). Limitando a 30 dias.")
            dataInicio = dataFim.AddDays(-30)
        End If

        Console.WriteLine($"   üìÖ Gerando dados de {dataInicio:dd/MM/yyyy} at√© {dataFim:dd/MM/yyyy} ({periodoMaximo} dias)")

        ' Grupos de suporte
        Dim grupos As String() = {"Suporte T√©cnico", "Desenvolvimento", "Infraestrutura", "Seguran√ßa", "DBA"}
        Dim categorias As String() = {"Acesso", "Hardware", "Software", "Rede", "Email", "Backup", "Seguran√ßa", "Performance"}
        Dim prioridades As String() = {"Baixa", "M√©dia", "Alta", "Cr√≠tica"}
        Dim departamentos As String() = {"TI", "Administrativo", "Financeiro", "Vendas", "Marketing", "RH", "Opera√ß√µes"}

        Dim random As New Random(CInt(DateTime.Now.Ticks Mod Integer.MaxValue)) ' Seed baseado no tempo atual (modificado para evitar overflow)

        ' Gerar aproximadamente 50 incidentes no per√≠odo v√°lido
        For i As Integer = 1 To 50
            Try
                ' Data aleat√≥ria no per√≠odo v√°lido (usando per√≠odo limitado)
                Dim diasAleatorios = random.Next(0, periodoMaximo + 1)
                Dim dataCriacao = dataInicio.AddDays(diasAleatorios)

                ' 70% dos incidentes t√™m data de encerramento (mais realista para dados recentes)
                Dim dataEncerramento As DateTime? = Nothing
                If random.Next(100) < 70 Then
                    Dim tempoResolucao = random.Next(1, 7) ' 1 a 7 dias
                    dataEncerramento = dataCriacao.AddDays(tempoResolucao)
                End If

                Dim incidente As New IncidenteTeste With {
                    .Id = $"INC{dataCriacao:yyyyMMdd}{i:D3}",
                    .Assunto = GerarAssuntoAleatorio(random, categorias(random.Next(categorias.Length))),
                    .Departamento = departamentos(random.Next(departamentos.Length)),
                    .GrupoDirecionado = grupos(random.Next(grupos.Length)),
                    .Categoria = categorias(random.Next(categorias.Length)),
                    .Prioridade = prioridades(random.Next(prioridades.Length)),
                    .DataCriacao = dataCriacao,
                    .DataEncerramento = dataEncerramento
                }

                ' Usar o m√©todo do DatabaseManager que recebe os campos individuais
                Dim resultado = dbManager.InserirIncidente(
                    incidente.Id,
                    incidente.Assunto,
                    incidente.Departamento,
                    incidente.GrupoDirecionado,
                    incidente.Categoria,
                    incidente.Prioridade,
                    incidente.DataCriacao,
                    incidente.DataEncerramento)
                If resultado.Success Then
                    registrosInseridos += 1
                Else
                    registrosComErro += 1
                    Console.WriteLine($"   ‚ö†Ô∏è Erro ao inserir incidente {incidente.Id}: {resultado.Mensagem}")
                End If
            Catch ex As Exception
                registrosComErro += 1
                Console.WriteLine($"   ‚ö†Ô∏è Exce√ß√£o ao inserir incidente {i}: {ex.Message}")
            End Try
        Next

        Console.WriteLine($"   ‚úÖ Inseridos {registrosInseridos} incidentes incrementais")
        If registrosComErro > 0 Then
            Console.WriteLine($"   ‚ö†Ô∏è {registrosComErro} incidentes com erro")
        End If
    End Sub

    ''' <summary>
    ''' Gera assuntos aleat√≥rios baseados na categoria
    ''' </summary>
    Private Function GerarAssuntoAleatorio(random As Random, categoria As String) As String
        Dim assuntos As New Dictionary(Of String, String()) From {
            {"Acesso", {"Usu√°rio n√£o consegue fazer login", "Senha expirada", "Acesso negado ao sistema", "Problema de autentica√ß√£o", "Usu√°rio bloqueado"}},
            {"Hardware", {"Impressora n√£o funciona", "Mouse quebrado", "Teclado com teclas travadas", "Monitor com problema", "CPU superaquecendo"}},
            {"Software", {"Erro no relat√≥rio mensal", "Sistema lento", "Aplica√ß√£o n√£o abre", "Erro de compatibilidade", "Atualiza√ß√£o necess√°ria"}},
            {"Rede", {"Internet lenta", "Conex√£o inst√°vel", "WiFi n√£o conecta", "Cabo de rede com problema", "Switch com falha"}},
            {"Email", {"Email n√£o chega", "Spam excessivo", "Anexo n√£o abre", "Caixa de entrada cheia", "Configura√ß√£o de email"}},
            {"Backup", {"Backup n√£o realizado", "Restaura√ß√£o falhou", "Arquivo corrompido", "Espa√ßo insuficiente", "Agendamento n√£o funciona"}},
            {"Seguran√ßa", {"V√≠rus detectado", "Firewall bloqueando", "Acesso n√£o autorizado", "Dados vazados", "Certificado expirado"}},
            {"Performance", {"Sistema muito lento", "Timeout em consultas", "Mem√≥ria insuficiente", "CPU em 100%", "Disco cheio"}}
        }

        If assuntos.ContainsKey(categoria) Then
            Return assuntos(categoria)(random.Next(assuntos(categoria).Length))
        Else
            Return "Problema t√©cnico geral"
        End If
    End Function

    ''' <summary>
    ''' Obt√©m a data do √∫ltimo incidente registrado no banco de dados local
    ''' </summary>
    Private Function ObterDataUltimoRegistro() As DateTime
        Try
            Dim resultado = dbManager.ExecutarQuery("SELECT MAX(DATA_CRIACAO) as ultima_data FROM incidents")
            If resultado.Success AndAlso resultado.Registros.Count > 0 Then
                Dim ultimaData = resultado.Registros(0)("ultima_data")
                If ultimaData IsNot Nothing AndAlso Not IsDBNull(ultimaData) Then
                    Dim data = DateTime.Parse(ultimaData.ToString())

                    ' Verificar se a data √© v√°lida e n√£o √© futura
                    If data > DateTime.Now Then
                        Console.WriteLine($"   ‚ö†Ô∏è Data futura encontrada no banco: {data:dd/MM/yyyy}. Usando data atual.")
                        Return DateTime.Now.AddDays(-1)
                    End If

                    Return data
                End If
            End If
            Return DateTime.Now.AddDays(-7) ' Padr√£o: 7 dias atr√°s
        Catch ex As Exception
            Console.WriteLine($"   ‚ö†Ô∏è Erro ao obter √∫ltima data: {ex.Message}")
            Return DateTime.Now.AddDays(-7) ' Padr√£o: 7 dias atr√°s
        End Try
    End Function

    ''' <summary>
    ''' Limpa dados existentes das tabelas
    ''' </summary>
    Private Sub LimparDadosExistentes()
        Try
            ' Limpar tabela incidents
            Dim resultadoIncidents = dbManager.LimparTabela("incidents")
            If resultadoIncidents.Success Then
                Console.WriteLine($"   üóëÔ∏è {resultadoIncidents.Mensagem}")
            Else
                Console.WriteLine($"   ‚ö†Ô∏è Erro ao limpar incidents: {resultadoIncidents.Mensagem}")
            End If

            ' Limpar tabela historical_data
            Dim resultadoHistorical = dbManager.LimparTabela("historical_data")
            If resultadoHistorical.Success Then
                Console.WriteLine($"   üóëÔ∏è {resultadoHistorical.Mensagem}")
            Else
                Console.WriteLine($"   ‚ö†Ô∏è Erro ao limpar historical_data: {resultadoHistorical.Mensagem}")
            End If

        Catch ex As Exception
            Console.WriteLine($"   ‚ö†Ô∏è Erro ao limpar dados: {ex.Message}")
        End Try
    End Sub

    ''' <summary>
    ''' Insere dados de teste fixos (m√©todo original mantido para compatibilidade)
    ''' </summary>
    Private Sub InserirDadosTeste()
        ' Dados de teste - simulando incidentes reais
        Dim dadosTeste As New List(Of IncidenteTeste) From {
            New IncidenteTeste With {
                .Id = "INC001",
                .Assunto = "Problema de acesso ao sistema",
                .Departamento = "TI",
                .GrupoDirecionado = "Suporte T√©cnico",
                .Categoria = "Acesso",
                .Prioridade = "Alta",
                .DataCriacao = DateTime.Now.AddDays(-30),
                .DataEncerramento = DateTime.Now.AddDays(-25)
            },
            New IncidenteTeste With {
                .Id = "INC002",
                .Assunto = "Impressora n√£o funciona",
                .Departamento = "Administrativo",
                .GrupoDirecionado = "Suporte T√©cnico",
                .Categoria = "Hardware",
                .Prioridade = "M√©dia",
                .DataCriacao = DateTime.Now.AddDays(-25),
                .DataEncerramento = DateTime.Now.AddDays(-20)
            },
            New IncidenteTeste With {
                .Id = "INC003",
                .Assunto = "Erro no relat√≥rio mensal",
                .Departamento = "Financeiro",
                .GrupoDirecionado = "Desenvolvimento",
                .Categoria = "Software",
                .Prioridade = "Alta",
                .DataCriacao = DateTime.Now.AddDays(-20),
                .DataEncerramento = DateTime.Now.AddDays(-15)
            },
            New IncidenteTeste With {
                .Id = "INC004",
                .Assunto = "Internet lenta",
                .Departamento = "Vendas",
                .GrupoDirecionado = "Infraestrutura",
                .Categoria = "Rede",
                .Prioridade = "M√©dia",
                .DataCriacao = DateTime.Now.AddDays(-15),
                .DataEncerramento = DateTime.Now.AddDays(-10)
            },
            New IncidenteTeste With {
                .Id = "INC005",
                .Assunto = "Backup n√£o realizado",
                .Departamento = "TI",
                .GrupoDirecionado = "Infraestrutura",
                .Categoria = "Backup",
                .Prioridade = "Cr√≠tica",
                .DataCriacao = DateTime.Now.AddDays(-10),
                .DataEncerramento = DateTime.Now.AddDays(-5)
            },
            New IncidenteTeste With {
                .Id = "INC006",
                .Assunto = "Usu√°rio n√£o consegue fazer login",
                .Departamento = "RH",
                .GrupoDirecionado = "Suporte T√©cnico",
                .Categoria = "Acesso",
                .Prioridade = "Alta",
                .DataCriacao = DateTime.Now.AddDays(-5),
                .DataEncerramento = DateTime.Now.AddDays(-2)
            },
            New IncidenteTeste With {
                .Id = "INC007",
                .Assunto = "Sistema de email fora do ar",
                .Departamento = "Marketing",
                .GrupoDirecionado = "Infraestrutura",
                .Categoria = "Email",
                .Prioridade = "Cr√≠tica",
                .DataCriacao = DateTime.Now.AddDays(-2),
                .DataEncerramento = DateTime.Now.AddDays(-1)
            },
            New IncidenteTeste With {
                .Id = "INC008",
                .Assunto = "Atualiza√ß√£o de software necess√°ria",
                .Departamento = "Opera√ß√µes",
                .GrupoDirecionado = "Desenvolvimento",
                .Categoria = "Software",
                .Prioridade = "Baixa",
                .DataCriacao = DateTime.Now.AddDays(-1),
                .DataEncerramento = Nothing
            }
        }

        Dim registrosInseridos As Integer = 0
        Dim registrosComErro As Integer = 0

        For Each incidente In dadosTeste
            Try
                ' Usar o m√©todo do DatabaseManager que recebe os campos individuais
                Dim resultado = dbManager.InserirIncidente(
                    incidente.Id,
                    incidente.Assunto,
                    incidente.Departamento,
                    incidente.GrupoDirecionado,
                    incidente.Categoria,
                    incidente.Prioridade,
                    incidente.DataCriacao,
                    incidente.DataEncerramento)
                If resultado.Success Then
                    registrosInseridos += 1
                Else
                    registrosComErro += 1
                    Console.WriteLine($"   ‚ö†Ô∏è Erro ao inserir incidente {incidente.Id}: {resultado.Mensagem}")
                End If
            Catch ex As Exception
                registrosComErro += 1
                Console.WriteLine($"   ‚ö†Ô∏è Exce√ß√£o ao inserir incidente {incidente.Id}: {ex.Message}")
            End Try
        Next
        
        Console.WriteLine($"   ‚úÖ Inseridos {registrosInseridos} incidentes de teste")
        If registrosComErro > 0 Then
            Console.WriteLine($"   ‚ö†Ô∏è {registrosComErro} incidentes com erro")
        End If
    End Sub
    
    ''' <summary>
    ''' Atualiza a tabela de dados hist√≥ricos
    ''' </summary>
    Private Sub AtualizarDadosHistoricos()
        Try
            ' Buscar dados agregados usando DatabaseManager
            Dim resultadoQuery = dbManager.BuscarDadosAgregadosIncidentes()
            
            If Not resultadoQuery.Success Then
                Console.WriteLine($"   ‚ö†Ô∏è Erro ao buscar dados agregados: {resultadoQuery.Mensagem}")
                Return
            End If
            
            If resultadoQuery.Registros Is Nothing OrElse resultadoQuery.Registros.Count = 0 Then
                Console.WriteLine("   ‚ÑπÔ∏è Nenhum dado agregado encontrado para inserir na tabela hist√≥rica")
                Return
            End If
            
            Dim registrosInseridos As Integer = 0
            Dim registrosComErro As Integer = 0
            
            ' Processar cada registro retornado
            For Each registro In resultadoQuery.Registros
                Try
                    ' Criar objeto DadoHistorico a partir do registro
                    Dim dadoHistorico As New DadoHistorico With {
                        .GroupName = registro("group_name").ToString(),
                        .Data = registro("date").ToString(),
                        .Volume = Convert.ToInt32(registro("volume")),
                        .Category = registro("category").ToString(),
                        .Priority = registro("priority").ToString(),
                        .ResolutionTime = Nothing
                    }
                    
                    ' Usar o m√©todo do DatabaseManager que recebe o objeto completo
                    Dim resultado = dbManager.InserirOuAtualizarDadoHistorico(dadoHistorico)
                    If resultado.Success Then
                        registrosInseridos += 1
                    Else
                        registrosComErro += 1
                        Console.WriteLine($"   ‚ö†Ô∏è Erro ao inserir dado hist√≥rico: {resultado.Mensagem}")
                    End If
                Catch ex As Exception
                    registrosComErro += 1
                    Console.WriteLine($"   ‚ö†Ô∏è Exce√ß√£o ao inserir dado hist√≥rico: {ex.Message}")
                End Try
            Next
            
            Console.WriteLine($"   ‚úÖ Inseridos {registrosInseridos} registros hist√≥ricos")
            If registrosComErro > 0 Then
                Console.WriteLine($"   ‚ö†Ô∏è {registrosComErro} registros hist√≥ricos com erro")
            End If
            
        Catch ex As Exception
            Console.WriteLine($"   ‚ö†Ô∏è Erro ao atualizar dados hist√≥ricos: {ex.Message}")
        End Try
    End Sub
End Class

' --- Classes de Apoio ---

Public Class IncidenteTeste
    Public Property Id As String
    Public Property Assunto As String
    Public Property Departamento As String
    Public Property GrupoDirecionado As String
    Public Property Categoria As String
    Public Property Prioridade As String
    Public Property DataCriacao As DateTime
    Public Property DataEncerramento As DateTime?
End Class
